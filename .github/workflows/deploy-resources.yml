name: Deploy resources
# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Deploy resources
    runs-on: ubuntu-latest
    permissions: write-all
    env: 
      build_number: ${{ github.run_number }}
      REPO_NAME: ${{ github.repository }}
      USERNAME: ${{ github.actor }}
    steps:
      - name: Login to Vultr Instance and run terraform plan & terraform apply
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VULTR_INSTANCE_IP }}
          username: ${{ secrets.VULTR_INSTANCE_USER }}
          key: ${{ secrets.VULTR_INSTANCE_KEY }}
          script: |
            export TF_VAR_build_number=${{ env.build_number }}
            export build_number=${{ env.build_number }}
            cd devops-training
            if [ -d "./${{ env.REPO_NAME }}" ]; then
              echo "Repo name folder exists -- will move inside the folder"
            else
              echo "Repo name folder does not exist -- will clone the repo"
                git clone https://github.com/${{ env.REPO_NAME }}.git
            fi

            cd iris-ssm-demo
            git pull
            terraform init
            terraform plan -out=plan-${{ github.run_number }}.out
            terraform apply -auto-approve plan-${{ github.run_number }}.out 
      - name: Send the Apache Install command
        uses: appleboy/ssh-action@master
        env: 
          BUILD_NUMBER: ${{ github.run_number }}
        with:
          host: ${{ secrets.VULTR_INSTANCE_IP }}
          username: ${{ secrets.VULTR_INSTANCE_USER }}
          key: ${{ secrets.VULTR_INSTANCE_KEY }}
          script: |
            cd iris-ssm-demo
            git reset --hard origin/main
            git pull
            chmod +x ./scripts/ssm-apache-document.sh
            ./scripts/ssm-apache-document.sh
      - name: Add the infratag
        uses: actions/github-script@v7
        with:
          result-encoding: string
          retries: 1
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v.${{github.run_number}}',
              sha: context.sha
            })